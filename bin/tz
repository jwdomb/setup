#!/bin/bash
#
################################################################################
# Tz: display (input) time in various timezones
#
# Version 0.1 [follows semantic versioning system]
# Tested on macOS 10.13.6 and Debian 9
# WARNING: input may be parsed unsafely by ruby on macOS
#
#
################################################################################
# License
#
# Copyright 2018 Joseph Dombroski <jwdomb@jwdomb.com>.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
#
################################################################################
# Possible improvements
# 
# - check for dependences
# - trap errors and provide error messages
# - improve security of ruby parsing
# - reduce redundant-seeming lines
# - change IFs to CASEs?
# - allow an array of timezones to be configured
#
#
################################################################################
# Program


# ------------------------------------------------------------------------------
# Prepare variables

INPUT=$(echo "$1" | sed "s/'/ /g")
FORMAT="+%Y-%m-%d %H:%M:%S"
NUMBER_REGEX="^[0-9]+$"


# ------------------------------------------------------------------------------
# Default case: show time in various time zones

if [[ -z "$INPUT" ]]; then
	echo "DEFAULT"
	date -u "$FORMAT UTC %s" | sed 's/ \([A-Z]\+\) /\t\1\t/g'
	env TZ="America/New_York" date "$FORMAT EASTERN"
	env TZ="America/Los_Angeles" date "$FORMAT PACFIC"
	env TZ="America/Chicago" date "$FORMAT CENTRAL"

fi


# ------------------------------------------------------------------------------
# Input case: show input time converted into various time zones


if [[ ! -z "$INPUT" ]]; then

	if [[ $INPUT =~ $NUMBER_REGEX ]]; then

		if [[ $OSTYPE == "darwin"* ]]; then
			# uses `date -r`
			date -u -r "$INPUT" "$FORMAT UTC" | sed 's/ \([A-Z]\+\) /\t\1\t/g'
			env TZ="America/New_York" date -r "$INPUT" "$FORMAT EASTERN"
			env TZ="America/Los_Angeles" date -r "$INPUT" "$FORMAT PACIFIC"
			env TZ="America/Chicago" date -r "$INPUT" "$FORMAT CENTRAL"

		fi
		
		if [[ $OSTYPE == "linux-gnu" ]]; then
			# needs an @ before `date -d` value for timestamps
			date -u -d @"$INPUT" "$FORMAT UTC" | sed 's/ \([A-Z]\+\) /\t\1\t/g'
			env TZ="America/New_York" date -d @"$INPUT" "$FORMAT EASTERN"
			env TZ="America/Los_Angeles" date -d @"$INPUT" "$FORMAT PACIFIC"
			env TZ="America/Chicago" date -d @"$INPUT" "$FORMAT CENTRAL"
		fi

	else

		if [[ $OSTYPE == "darwin"* ]]; then
			# use ruby for unformatted parsing because macOS has no good `date` parsing
			INPUT_PARSED=$(ruby -e "require 'date'; puts DateTime.parse('${INPUT}').to_time.to_i.to_s")
			date -u -r "$INPUT_PARSED" "$FORMAT UTC %s" | sed 's/ \([A-Z]\+\) /\t\1\t/g'
			env TZ="America/New_York" date -r "$INPUT_PARSED" "$FORMAT EASTERN"
			env TZ="America/Los_Angeles" date -r "$INPUT_PARSED" "$FORMAT PACIFIC"
			env TZ="America/Chicago" date -r "$INPUT_PARSED" "$FORMAT CENTRAL"
		fi
		if [[ $OSTYPE == "linux-gnu" ]]; then
			date -u -d "$INPUT" "$FORMAT UTC %s" | sed 's/ \([A-Z]\+\) /\t\1\t/g'
			env TZ="America/New_York" date -d "$INPUT" "$FORMAT EASTERN"
			env TZ="America/Los_Angeles" date -d "$INPUT" "$FORMAT PACIFIC"
			env TZ="America/Chicago" date -d "$INPUT" "$FORMAT CENTRAL"
		fi
	fi

fi
